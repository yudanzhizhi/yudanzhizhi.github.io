[{"title":"Hello World","url":"/2024/06/02/hello-world/","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.\nQuick StartCreate a new post$ hexo new &quot;My New Post&quot;\n\nMore info: Writing\nRun server$ hexo server\n\nMore info: Server\nGenerate static files$ hexo generate\n\nMore info: Generating\nDeploy to remote sites$ hexo deploy\n\nMore info: Deployment\n"},{"title":"Python","url":"/2024/06/02/Python/","content":"Python学习入门基础语法字符串a = &quot;abcde&quot;&gt;&gt;&gt;a[::-1]&#x27;edcba&#x27;&gt;&gt;&gt; a[1:2]&#x27;b&#x27;&gt;&gt;&gt;a[0:2]&#x27;ab&#x27;\n\n\n\n输入&gt;&gt;&gt; input(&quot;请输入：&quot;)请输入：ahahah&#x27;ahahah&#x27;&gt;&gt;&gt;\n\n\n\n输出#!/usr/bin/python3 str=&#x27;123456789&#x27; print(str)                 # 输出字符串print(str[0:-1])           # 输出第一个到倒数第二个的所有字符print(str[0])              # 输出字符串第一个字符print(str[2:5])            # 输出从第三个开始到第六个的字符（不包含）print(str[2:])             # 输出从第三个开始后的所有字符print(str[1:5:2])          # 输出从第二个开始到第五个且每隔一个的字符（步长为2）print(str * 2)             # 输出字符串两次print(str + &#x27;你好&#x27;)         # 连接字符串 print(&#x27;------------------------------&#x27;) print(&#x27;hello\\nrunoob&#x27;)      # 使用反斜杠(\\)+n转义特殊字符print(r&#x27;hello\\nrunoob&#x27;)     # 在字符串前面添加一个 r，表示原始字符串，不会发生转义\n\n\n\n循环while（没有do…while）：\nwhile &lt;condition&gt;:\t&lt;statements&gt;else:\t&lt;additional_statements&gt;\n\nfor：\nfor &lt;variable&gt; in &lt;sequence&gt;:    &lt;statements&gt;else:    &lt;statements&gt;\n\n\n\n推导式列表[表达式 for 变量 in 列表] [out_exp_res for out_exp in input_list]或者 [表达式 for 变量 in 列表 if 条件][out_exp_res for out_exp in input_list if condition]example:&gt;&gt;&gt; names = [&#x27;Bob&#x27;,&#x27;Tom&#x27;,&#x27;alice&#x27;,&#x27;Jerry&#x27;,&#x27;Wendy&#x27;,&#x27;Smith&#x27;]&gt;&gt;&gt; new_names = [name.upper() for name in names if len(name)&gt;3]&gt;&gt;&gt; print(new_names)[&#x27;ALICE&#x27;, &#x27;JERRY&#x27;, &#x27;WENDY&#x27;, &#x27;SMITH&#x27;]\n\n\n\n进制转换在python中二进制用0b加相应数字来表示，8进制用0o加相应数字来表示，16进制用0x加相应数字来表示。即:    #其他进制转换二进制#&gt;&gt;&gt; bin(2) #十进制转换二进制#&#x27;0b10&#x27;&gt;&gt;&gt; bin(0o10) #八进制转换二进制#&#x27;0b1000&#x27;&gt;&gt;&gt; bin(0xf) #十六进制转换二进制#&#x27;0b1111&#x27;#其他进制转换为八进制#&gt;&gt;&gt; oct(0b101)&#x27;0o5&#x27;&gt;&gt;&gt; oct(0xf)&#x27;0o17&#x27;&gt;&gt;&gt; oct(0o123)&#x27;0o123&#x27;        #其他进制转换为十六进制#&gt;&gt;&gt; hex(0o10)&#x27;0x8&#x27;&gt;&gt;&gt; hex(3)&#x27;0x3&#x27;&gt;&gt;&gt; hex(0b111)&#x27;0x7&#x27;#其他进制转换为十进制#&gt;&gt;&gt; int(0o10)8&gt;&gt;&gt; int(0xf)15&gt;&gt;&gt; int(0b10)2\n\n\n\n\n\n数据结构和算法数据结构列表（list）：[]\n\n\n方法\n描述\n\n\n\nlist.append(x)\n把一个元素添加到列表的结尾，相当于a[len(a):] &#x3D; [x]\n\n\nlist.clear()\n移除列表中的所有项，等于del a[:]。\n\n\nlist.copy()\n返回列表的浅复制，等于a[:]。\n\n\nlist.count(x)\n返回 x 在列表中出现的次数。\n\n\nlist.extend(L)\n通过添加指定列表的所有元素来扩充列表，相当于 a[len(a):] &#x3D; L。\n\n\nlist.index(x)\n返回列表中第一个值为 x 的元素的索引。如果没有匹配的元素就会返回一个错误。\n\n\nlist.insert(i, x)\n在指定位置插入一个元素。第一个参数是准备插入到其前面的那个元素的索引，例如 a.insert(0, x) 会插入到整个列表之前，而 a.insert(len(a), x) 相当于 a.append(x) 。\n\n\nlist.pop([i])\n从列表的指定位置移除元素，并将其返回。如果没有指定索引，a.pop()返回最后一个元素。元素随即从列表中被移除。（方法中 i 两边的方括号表示这个参数是可选的，而不是要求你输入一对方括号，你会经常在 Python 库参考手册中遇到这样的标记。）\n\n\nlist.remove(x)\n删除列表中值为 x 的第一个元素。如果没有这样的元素，就会返回一个错误。\n\n\nlist.reverse()\n倒排列表中的元素。\n\n\nlist.sort(cmp&#x3D;None, key&#x3D;None, reverse&#x3D;False)\n对列表中的元素进行排序。  cmp – 可选参数, 如果指定了该参数会使用该参数的方法进行排序。 key – 主要是用来进行比较的元素，只有一个参数，具体的函数的参数就是取自于可迭代对象中，指定可迭代对象中的一个元素来进行排序。 reverse – 排序规则，reverse &#x3D; True 降序， reverse &#x3D; False 升序（默认）。\n\n\n删除元素的四种方法\ndel listname[index]\nlistname.pop(index)\nlistname.remove(value)\nlistname.clear()\n\n&gt;&gt;&gt; a = [66.25, 333, 333, 1, 1234.5]&gt;&gt;&gt; print(a.count(333), a.count(66.25), a.count(&#x27;x&#x27;))2 1 0&gt;&gt;&gt; a.insert(2, -1)&gt;&gt;&gt; a.append(333)&gt;&gt;&gt; a[66.25, 333, -1, 333, 1, 1234.5, 333]&gt;&gt;&gt; a.index(333)1&gt;&gt;&gt; a.remove(333)&gt;&gt;&gt; a[66.25, -1, 333, 1, 1234.5, 333]&gt;&gt;&gt; a.reverse()&gt;&gt;&gt; a[333, 1234.5, 1, 333, -1, 66.25]&gt;&gt;&gt; a.sort()&gt;&gt;&gt; a[-1, 1, 66.25, 333, 333, 1234.5]\n\n\n\n元组（tuple）：()\n字典（dictionary）：{}\n\n\n方法\n描述\n\n\n\ndict.get(key[, value])\n返回指定键的值，如果键不在字典中返回默认值 None或者设置的默认值。\n\n\n\n\n\n\n\n\n\n\n方法：dict.get(key[, value])描述：返回指定键的值，如果键不在字典中返回默认值 None或者设置的默认值。&gt;&gt;&gt; a = &#123;&#125;&gt;&gt;&gt; print(&#x27;URL: &#x27;, a.get(&#x27;url&#x27;))     # 返回 NoneURL:  None&gt;&gt;&gt; b = &#123;&#x27;Name&#x27;: &#x27;Runoob&#x27;, &#x27;Age&#x27;: 27&#125;&gt;&gt;&gt; print (&quot;Age : %s&quot; %  b.get(&#x27;Age&#x27;))Age : 27&gt;&gt;&gt; print (&quot;Sex : %s&quot; %  b.get(&#x27;Sex&#x27;))  Sex : None&gt;&gt;&gt; print (&#x27;Salary: %s&#x27; % b.get(&#x27;Salary&#x27;, 0.0))Salary: 0.0\n\n\n\ncollecttions模块中的计数器Counter()&gt;&gt;&gt; from collections import Counter&gt;&gt;&gt; cnt = Counter()\n\n\n\n高级生成器generator创建：与用表达式创建列表一样，只不过将[]换成()\n&gt;&gt;&gt; L = [x * x for x in range(10)]&gt;&gt;&gt; L[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]&gt;&gt;&gt; g = (x * x for x in range(10))&gt;&gt;&gt; g&lt;generator object &lt;genexpr&gt; at 0x1022ef630&gt;\n\n\n\n函数set()set() 函数创建一个无序不重复元素集，可进行关系测试，删除重复数据，还可以计算交集、差集、并集等。\n&gt;&gt;&gt; x = set(&#x27;eleven&#x27;)&gt;&gt;&gt; y = set(&#x27;twelve&#x27;)&gt;&gt;&gt; x,y(&#123;&#x27;l&#x27;, &#x27;e&#x27;, &#x27;n&#x27;, &#x27;v&#x27;&#125;, &#123;&#x27;e&#x27;, &#x27;v&#x27;, &#x27;l&#x27;, &#x27;t&#x27;, &#x27;w&#x27;&#125;)&gt;&gt;&gt; x &amp; y  #交集&#123;&#x27;l&#x27;, &#x27;e&#x27;, &#x27;v&#x27;&#125;&gt;&gt;&gt; x | y  #并集&#123;&#x27;e&#x27;, &#x27;v&#x27;, &#x27;n&#x27;, &#x27;l&#x27;, &#x27;t&#x27;, &#x27;w&#x27;&#125;&gt;&gt;&gt; x - y  #差集&#123;&#x27;n&#x27;&#125;&gt;&gt;&gt; y -x   #差集&#123;&#x27;t&#x27;, &#x27;w&#x27;&#125;&gt;&gt;&gt; x ^ y  #补集&#123;&#x27;t&#x27;, &#x27;n&#x27;, &#x27;w&#x27;&#125;&gt;&gt;&gt; y ^ x  #补集&#123;&#x27;w&#x27;, &#x27;n&#x27;, &#x27;t&#x27;&#125;&gt;&gt;&gt; \n\n\n\n\n\n文件操作open()函数f &#x3D; open(“路径”, “模式”, 编码)，成功后返回一个文件对象\n&#x2F;&#x2F; r—–读取模式（只读） w——写入模式（只写）a——附加模式  r+——读写模式（文件内容后追加）\n&#x2F;&#x2F;编码为可选项，encoding&#x3D;”UTF-8”\n&#x2F;&#x2F;r模式下若文件不存在则会报错，而w&#x2F;a模式会创建一个新的文件\n读文件read()方法f.read()，一次性读取文件内所有内容并以字符串形式进行返回\n&#x2F;&#x2F;程序会记录文件读取位置，因此再次调用read()返回的结果为空\nf.read(10) &#x2F;&#x2F;读取第1-10个字节的文件内容\nf.read(10) &#x2F;&#x2F;再次调用，读取第11-20个字节的文件内容\nreadline()方法f.readline()，根据换行符来判断（换行符也会被读取），只读一行文件内容\n&#x2F;&#x2F;通过返回值是否为空判断是否读到文件结尾\nline=f.readline()while line != &quot;&quot;:\tprint(line)\tline= f.readline()\n\n\n\nreadlines()方法f.readlines()，读取文件全部内容，把每行作为列表元素返回\nlines&#x3D; f.readlines()\nfor line in lines:\n​\tprint(line)\nclose()方法f.close()，关闭文件\nwith关键字with open(“url”) as f:\n​\tprint(f.read())  &#x2F;&#x2F;文件操作\n&#x2F;&#x2F;完成所有操作后自动关闭文件\n写文件&#x2F;&#x2F;w模式打开文件进行写入时，若文件原本已经存在，会清空原有内容，a模式不会\n&#x2F;&#x2F;w和a都没有read()\nwrite()方法f.write(“Hello! “)\nf.write(“Yoooo”)\n\n\n&#x2F;&#x2F;不会默认换行\n爬虫HTTP请求和响应请求：请求行+请求头+请求体GET（一般都是用GET）——用于获得数据：进入一个网页时，浏览器发送GET请求，得到网页内容\nPOST——用于创建数据：提交账号注册表单时，浏览器发送POST请求，把用户名、密码等信息放到请求主体里给到服务器\n\n请求行：方法类型 资源路径 协议版本资源路径指明要访问服务器的哪个资源，如www.douban.com/movie/top250，第一个斜杠（/）表示资源路径的根，所以根后面的/movie/top250就是要访问的资源的路径\n有时候还可以给出查询参数，问号（？）后面的就是查询参数，可以传递给服务器额外的信息，不同信息之间用&amp;分隔\n\n请求头：会包含一些给服务器的信息Host指主机域名，主机域名结合请求行里的路径资源，可以得到一个完整的网址\nUser-Agent用来告知服务器客服端的相关信息\n\nAccept是在告诉浏览器客户端想要接受的响应数据是什么类型的，接受多种类型可以用逗号分隔\n\n请求体：里面可以放客户端传给服务器的其他任意数据，但是GET的请求体一般是空的响应：状态行+响应头+响应体\n状态行：协议版本 状态码 状态消息2开头表示成功，请求已完成处理；3开头表示重定向，需要进一步操作；4开头表示客户端错误，如请求里面有错误或请求的资源无效；5开头表示服务器错误，如出现问题或正在维护\n\n响应头：包含一些告知客户端的信息Date，生产日期和时间\nContent-Type，返回内容的类型及编码格式\n响应体：服务器想给客户端的数据内容响应体里面的信息是我们秀昂要的信息\n构建和发送HTTP请求——Requests库get()方法response &#x3D; requests.get(URL)\n&#x2F;&#x2F;网址实际的URL还包括协议名\nok属性response.ok，返回布尔值，True为成功\ntext属性response.text，以字符串储存响应内容\nheaders参数response &#x3D; requests.get(URL, headers&#x3D;***)\n数据类型为字典，里面的哥哥键值对对应了我们要传入的各个信息\n一个例子：可以帮我们把爬虫程序伪装成正常浏览器。当我们使用浏览器时，浏览器向服务器发送GET请求，并且请求头的User-Agent会自动带有浏览器类型及版本，还有电脑的操作系统等等，用代码发送请求不会带有这些信息，服务器可以通过这一点判断进来的请求是来自浏览器还是程序\n解析网页内容——Beautiful Soup库from bs4 impot BeautifulSoup\nimport requests\ncontent &#x3D; requests.get(URL).text\n构造函数soup &#x3D; BeautifulSoup(content, “html.parser”)，获得一个实例对象，解析成下图所示的树形结构\n\n各种方法soup.p，得到这个HTML里的第一个p元素。若p里面还有其他标签，会把它们一起返回\nsoup.img，第一个img元素\nfind()方法link &#x3D; title.find(“a”)\n返回第一个对象，此例中为返回title里的第一个a元素\nfind_All()方法soup.findAll()，能根据标签、属性等找出所有符合要求的元素\nall_prices &#x3D; soup.findAll(“p”, attrs&#x3D;{“class”: “price_color”})，atts为可选参数，是一个字典，键值对就对应你想找的属性和值\n返回一个可迭代对象，所以可以通过循环依次操作返回的各个对象\nstring属性for price in all_prices:\n​\tprint(price.string)\n会把标签包围的文字返回给我们\n"},{"title":"nice_resource","url":"/2024/06/27/nice-resource/","content":"\nSorted by Juanry\n\n资源阿里巴巴矢量图标库\nIconPark\n谷歌字体（也有很多图标）\nFont Awesome\n中国色\nCode examples\nMaziva（视频素材）\nBensound（无版权音乐）\nPixabay（音视频图像都有）\nAdobe（音频）\nPexels（图片）\nStreetWill（图片）\nUnsplash（图片）\n字由（字体，下载客户端）\n字体天下\n猫啃网（免费可商用字体）\n51PPT模板\n第1PPT\nMicrosoft Azure（免费服务器）\nLibrary Genesis+（电子书，需魔法）：\n\nLink 1\nLink 2\nLink 3\n\nZ-Library（电子书，需魔法）：\n\nLink 1\nLink 2\nLink 3\n\nElementUI（前端组件库）\n站酷（各种素材）\n编译原理（第2版）答案（紫龙书）\nOJ力扣\n洛谷（新手友好）\n炼码\nVirtual Judge\nUESTC OJ（使用校园网访问）\nCodeforces（定期举办比赛）\nAtCoder（日本的OJ，定期举办比赛）\n杭电OJ\n北大OJ\nLibreOJ \nHydroOJ\nAcWing（主要还是卖课的）\n工具chatgptAMZ chat（chatgpt镜像）\nWeTab 新标签页（插件，有chatgpt镜像）\nPoe（chatgpt，需魔法）\n编辑器SVG编辑器\niLovePDF（PDF在线工具）\nOverleaf（在线 $LaTeX$ 编辑器）  \n在线LaTeX公式编辑器\n翻译器DeepL（翻译）\n超星翻译（pdf翻译）  &#x2F;&#x2F; 看外文论文挺好用\n找论文中国知网\n万方\nWeb of Science（外文）  \n其他可画（海报、PPT等）\n秀米（排版）\nPix Fix（免费图片降噪修复）\nclip-path生成器\n在线抠图\n压缩图片工具\n标小智LOGO神器（做图标的）\nregex101（匹配正则表达式）\n数学GeoGebra（数学等画图）\nOEIS（数列找规律，你发现一个数列丢进去，往往能找到它是个啥数列）\nGraph Editor（图论画图工具）\nWolfram|Alpha（啥都能算）\nLaTeXLaTeX 数学公式大全\n常用数学符号的 LaTeX 表示方法\n如何用 Markdown&amp;LaTeX 写一篇排版整齐的题解？（当然对于写博客有指导意义）\nDetexify LaTeX handwritten symbol recognition（$LaTeX$ 符号手写识别）\n一份其实很短的 LaTeX 入门文档 | 始终\n学习菜鸟教程\nLinux命令大全\n头歌\nW3school\nMDN\n哔哩哔哩\n代码随想录\n维基百科\nLearn X in Y Minutes: Scenic Programming Language Tours\nOI Wiki（算法竞赛）\nhzwer&#x2F;shareOI: 算法竞赛课件分享 \n博客团队美团技术团队\n个人白忠建老师的博客\n廖雪峰大神的博客\n阮一峰的网络日志\nMatrix67: The Aha Moments（Matrix67 的博客，内有很多有趣的内容，大部分与数学相关）\n社区腾讯云开发者社区\n阿里云开发者社区\n"},{"title":"课程网课","url":"/2024/06/27/%E8%AF%BE%E7%A8%8B%E7%BD%91%E8%AF%BE/","content":"计算机组成原理         \n计算机网络        \n编译原理：          \n\n知识点复习+一点题         \n面向试卷复习        \n求first集和follow集\n\n数字信号处理\n"},{"title":"2024C4选拔赛感想","url":"/2024/06/28/2024C4%E9%80%89%E6%8B%94%E8%B5%9B%E6%84%9F%E6%83%B3/","content":"做了一个多月的项目，完成度和前景也挺好的，结果只拿到一个省三。排名前面的大部分都是大模型，不得不说，现在大模型真是趋势，今后（起码是近些年）打比赛，应该应用尽用大模型才能拿到一个比较满意的名次吧。继续努力。\n"}]